from script_test import (
    load_pdf,
    chunk_text,
    get_embedding_model,
    create_embeddings,
    store_in_qdrant,
)
from config import get_settings
from embedding_query_and_searches_ngocson import QdrantSearcher

settings = get_settings()


# ---------------------------------------------------------------------------
# H√ÄM H·ªñ TR·ª¢ N·ªòI B·ªò
# ---------------------------------------------------------------------------


def _get_callable(module_or_obj, *names):
    """
    H√†m ti·ªán √≠ch gi√∫p t√¨m v√† l·∫•y v·ªÅ m·ªôt h√†m c√≥ th·ªÉ g·ªçi (callable)
    trong module ho·∫∑c ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c truy·ªÅn v√†o.

    - D√πng khi c√≥ th·ªÉ t·ªìn t·∫°i nhi·ªÅu t√™n h√†m kh√°c nhau cho c√πng ch·ª©c nƒÉng.
    - Tr√°nh g√¢y crash n·∫øu kh√¥ng t√¨m th·∫•y h√†m n√†o h·ª£p l·ªá.

    Args:
        module_or_obj: Module ho·∫∑c ƒë·ªëi t∆∞·ª£ng c·∫ßn t√¨m h√†m.
        *names: Danh s√°ch c√°c t√™n h√†m kh·∫£ dƒ©.

    Returns:
        Callable object n·∫øu t√¨m th·∫•y, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ None.
    """
    for n in names:
        f = getattr(module_or_obj, n, None)
        if callable(f):
            return f
    return None


# ---------------------------------------------------------------------------
# CH∆Ø∆†NG TR√åNH CH√çNH
# ---------------------------------------------------------------------------


def main():
    """
    Ch·∫°y to√†n b·ªô pipeline x·ª≠ l√Ω PDF v√† l∆∞u tr·ªØ embedding v√†o Qdrant.

    Pipeline bao g·ªìm c√°c b∆∞·ªõc:
        1. ƒê·ªçc n·ªôi dung t·ª´ file PDF.
        2. Chia nh·ªè vƒÉn b·∫£n th√†nh c√°c ƒëo·∫°n (chunking).
        3. Kh·ªüi t·∫°o m√¥ h√¨nh nh√∫ng (embedding model).
        4. Sinh vector embedding cho t·ª´ng ƒëo·∫°n.
        5. L∆∞u tr·ªØ d·ªØ li·ªáu v√†o Qdrant vector database.
        6. C·∫≠p nh·∫≠t ch·ªâ m·ª•c HNSW ƒë·ªÉ t·ªëi ∆∞u truy v·∫•n vector.
    """
    print("=" * 60)
    print("üöÄ PDF TO QDRANT EMBEDDING PIPELINE (JINA v3)")
    print("=" * 60)

    try:
        # 1Ô∏èƒê·ªçc d·ªØ li·ªáu t·ª´ file PDF
        text = load_pdf(settings.PDF_PATH)

        # 2Ô∏èTi·ªÅn x·ª≠ l√Ω v√† chia nh·ªè n·ªôi dung
        chunks = chunk_text(text)

        # 3Ô∏è Kh·ªüi t·∫°o m√¥ h√¨nh embedding (s·ª≠ d·ª•ng Jina)
        print(f"\nüîß Initializing Jina embedding model...")
        embedding_model = get_embedding_model()

        # 4Ô∏è Sinh vector embedding cho t·ª´ng ƒëo·∫°n vƒÉn b·∫£n
        embeddings = create_embeddings(chunks, embedding_model)

        # 5Ô∏è L∆∞u embedding v√† text v√†o Qdrant
        store_in_qdrant(chunks, embeddings)

        print("\n" + "=" * 60)
        print("‚ú® PIPELINE COMPLETED SUCCESSFULLY!")
        print("=" * 60)

        # 6Ô∏è C·∫≠p nh·∫≠t c·∫•u h√¨nh ch·ªâ m·ª•c HNSW sau khi th√™m d·ªØ li·ªáu
        try:
            import hnsw_indexing_update as hnsw_mod

            # T√¨m v√† g·ªçi h√†m c·∫≠p nh·∫≠t HNSW trong module (n·∫øu c√≥)
            hnsw_func = _get_callable(
                hnsw_mod, "hnsw_indexing_updated", "hnsw_indexing_update"
            )
            if hnsw_func:
                hnsw_func(
                    collection_name=settings.COLLECTION_NAME,
                    host=settings.QDRANT_HOST,
                    port=settings.QDRANT_PORT,
                )
            else:
                print(
                    "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y h√†m c·∫≠p nh·∫≠t HNSW trong module hnsw_indexing_update. B·ªè qua b∆∞·ªõc n√†y."
                )
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi c·∫≠p nh·∫≠t HNSW index: {e}")

        # üßπ Gi·∫£i ph√≥ng b·ªô nh·ªõ m√¥ h√¨nh embedding
        del embedding_model

    except FileNotFoundError:
        print(f"\n‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file t·∫°i {settings.PDF_PATH}")
        print("üëâ Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n PDF_PATH trong file config.")
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")
        raise


# ---------------------------------------------------------------------------
# CH·∫†Y TR·ª∞C TI·∫æP MODULE
# ---------------------------------------------------------------------------

if __name__ == "__main__":
    main()
